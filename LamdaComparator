람다 표현 방식, :: 사용


1. Comparator 인터페이스를 구현한 객체를 정렬 기준으로 사용한다.
원칙대로 Comparator 인터페이스 구현한 클래스를 만든 다음 객체를 생성해서 사용.
public class CardComp implements Comparator<Card105>{
	@Override
	public int compareTo(Card105 c1, Card 105 c2){
		문자열 compareTo() -사전식 비교
		return c1.getCardVal().compareTo(c2.getCardVal());
		}
	}
	
	cards.sort(new CardComp());
	
2. Comparator 인터페이스를 구현하면서 객체를 생성한다.
클래스를 만들지 않고도 인터페이스에 {} 를 붙여서 객체 생성 가능.
new Comparator<Card>(){compareTo(Card105 c1, Card105 c2)){}}
== new 인터페이스(){ 메서드 구현() } 처럼 인터페이스의 메서드를 구현하면서 생성할 수 있다.

Comparator<Card105> cmp= new Comparator<Card105>(){
	@Override
	public int compare(Card105 c1, Card105 c2){
		return c1.getCardVal().compareTo(c2.getCardVal());
	}
};
cards.sort(cmp);

3. new Comparator<Card105>(){compareTo(Card105 c1, Card105 c2)){}} 를 레퍼런스 대신 대입한다.
레퍼런스 없는(이름 없는(cmp)) 익명 클래스를 만든다.

cards.sort(new Comparator<Card105>(){
	@Override
	public int compare(Card105 c1, Card105 c2){
		return c1.getCardVal().compareTo(c2.getCardVal());
	}
});

4. 해당 클래스에 메서드가 한 개라면 함수 형식(클래스와 메서드 없이 사용, 식별자 없이 사용)을 이용하여 간략화해도 어떤 객체의 어떤 메서드가 호출되었는지 알 수 있다.
== 람다 표현식!!!!
클래스와 메서드를 삭제(식별자 삭제)하고 메서드의 () 이후 부분을 남기면 (){}이 된다.
()와 {} 사이에 클래스, 메서드가 삭제된 것을 표시하기 위해 ->을 넣으면 ()->{} 가 완성.

cards.sort(
	(Card105 c1, Card105 c2) -> { return c1.getCardVal().compareTo(c2.getCardVal());}
);

5. 람다 표현에서 타입이 없어도 알 수 있으므로 타입 제거 가능
	
cards.sort(
	(c1,c2) ->{ return -c1.getCardVal().compareTo(c2.getCardVal());} );

);

6. c1.getCardVal().compareTo(c2.getCardVal())처럼 같은 메서드를 두 번 이상 사용할 때는 
Comparator.comparing(타입::메서드이름)을 사용할 수 있다.

Comparator<Card105> cmp= new Comparator.comparing(Card109::getCardVal);
cards.sort(cmp);

== cards.sort(Comparator.comparing(Card::getCardVal));

7. static 메서드로 비교 기준을 만들어 정렬할 수 있다. Card109::compareCard는 Card109클래스의 static 메서드 compareCard()를 호출한다

Comparator<Card105> cmp= Card109::compareCard;
cards.resort(cmp);
